<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.SqlServer</name>
    </assembly>
    <members>
        <member name="T:Cake.SqlServer.BackupAliases">
            <summary>
            Contains functionality to backup and restore SQL Server database
            </summary>
        </member>
        <member name="M:Cake.SqlServer.BackupAliases.RestoreSqlBackup(Cake.Core.ICakeContext,System.String,Cake.Core.IO.FilePath,Cake.SqlServer.RestoreSqlBackupSettings)">
            <summary>
            Restores a database from a backup file.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to connect to master database for this operation.</param>
            <param name="backupFile">Absolute path to .bak file</param>
            <param name="settings">Settings for restoring database</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Restore-Database")
                    .Does(() =>
                    {
                        var connString = @"data source=(LocalDb)\v12.0";
                        var backupFile = new FilePath("C:/tmp/myBackup.bak");
                        RestoreSqlBackup(connString, backupFile, new RestoreSqlBackupSettings() 
                           {
                                 NewDatabaseName = "RestoredFromTest.Cake",
                                 NewStorageFolder = new DirectoryPath(System.IO.Path.GetTempPath()), // place files in Temp folder
                                 WithReplace = true, // tells sql server to discard non-backed up data when overwriting existing database
                           }); 
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.BackupAliases.RestoreSqlBackup(Cake.Core.ICakeContext,System.String,Cake.Core.IO.FilePath)">
            <summary>
            Restores a database from a backup file.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to connect to master database for this operation.</param>
            <param name="backupFile">Absolute path to .bak file</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Restore-Database")
                    .Does(() =>
                    {
                        var connString = @"data source=(LocalDb)\v12.0";
                        var backupFile = new FilePath("C:/tmp/myBackup.bak");
                        RestoreSqlBackup(connString, backupFile); 
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.BackupAliases.BackupDatabase(Cake.Core.ICakeContext,System.String,System.String,Cake.SqlServer.BackupDatabaseSettings)">
            <summary>
            Backup an existing database to a file.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. Regardless of the database specified, the connection will switch to master database for this operation.</param>
            <param name="databaseName">Database to backup.</param>
            <param name="settings">Settings for backing up database.</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Backup-Database")
                    .Does(() =>
                    {
                        var connString = @"data source=(LocalDb)\v12.0";
                        var databaseName = "MyDatabase";
                        BackupDatabase(connString, databaseName, new BackupDatabaseSettings() 
                           {
                                 Compress = false,
                                 Path = System.IO.Path.GetTempPath() // place files in Temp folder
                           }); 
                    });
            </code>
            </example>
        </member>
        <member name="T:Cake.SqlServer.BackupDatabaseSettings">
            <summary>
            Settings for backing up database to a file
            </summary>
        </member>
        <member name="M:Cake.SqlServer.BackupDatabaseSettings.#ctor">
            <summary>
            Default constructor. Sets Compress to true.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.BackupDatabaseSettings.Path">
            <summary>
            Gets or sets the backup file path.
            This can either be a file or a folder
            </summary>
        </member>
        <member name="P:Cake.SqlServer.BackupDatabaseSettings.Compress">
            <summary>
            Sets the flag to execute backup and create a compressed file
            </summary>
        </member>
        <member name="T:Cake.SqlServer.CreateDatabaseSettings">
            <summary>
            Settings object for creation of databases
            See spec from https://docs.microsoft.com/en-us/sql/t-sql/statements/create-database-sql-server-transact-sql#the-model-database-and-creating-new-databases
            </summary>
        </member>
        <member name="P:Cake.SqlServer.CreateDatabaseSettings.PrimaryFile">
            <summary>
            File Spec for Primary database file.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.CreateDatabaseSettings.LogFile">
            <summary>
            File Spec for transaction log file
            </summary>
        </member>
        <member name="M:Cake.SqlServer.CreateDatabaseSettings.WithPrimaryFile(System.String)">
            <summary>
            Builder method to set up path for primary file.
            </summary>
            <param name="primaryFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Cake.SqlServer.CreateDatabaseSettings.WithLogFile(System.String)">
            <summary>
            Builder method to set up path to log file.
            </summary>
            <param name="logFileName"></param>
            <returns></returns>
        </member>
        <member name="T:Cake.SqlServer.CreateDatabaseFileSpec">
            <summary>
            File Spec object to describe file name and path for creating databases
            </summary>
        </member>
        <member name="M:Cake.SqlServer.CreateDatabaseFileSpec.#ctor(System.String)">
            <summary>
            Constructor for filespec.
            </summary>
            <param name="fileName">Path to file</param>
        </member>
        <member name="P:Cake.SqlServer.CreateDatabaseFileSpec.FileName">
            <summary>
            Path to file
            </summary>
        </member>
        <member name="P:Cake.SqlServer.CreateDatabaseFileSpec.Name">
            <summary>
            Name of file - internal name of file in SQL Server. 
            Defaulted to database name for mdf and {DatabaseName}_log for log files
            </summary>
        </member>
        <member name="T:Cake.SqlServer.DacAliases">
            <summary>
            Contains functionality to deal with DAC functionality from SQL Server: create and restore BACPAC files; 
            create and restore DACPAC files
            </summary>
        </member>
        <member name="M:Cake.SqlServer.DacAliases.CreateBacpacFile(Cake.Core.ICakeContext,System.String,System.String,Cake.Core.IO.FilePath)">
            <summary>
            Creates a bacpac file for easy database backuping. 
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to connect to master database for this operation.</param>
            <param name="databaseName">Name of the database you'd like to create a bacpac from</param>
            <param name="resultingFilePath">Full path where you'd like to store resulting bacpac</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Bacpac")
                	.Does(() =>{
                		var connString = @"data source=(LocalDb)\v12.0";
                
                		var dbName = "ForBacpac";
                
                		CreateDatabase(connString, dbName);
                
                		CreateBacpacFile(connString, dbName, new FilePath(@".\ForBacpac.bacpac"));
                	});
                });        
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.DacAliases.RestoreBacpac(Cake.Core.ICakeContext,System.String,System.String,Cake.Core.IO.FilePath)">
            <summary>
            Restores a bacpac file into a database.
            <para>
            NB: there must be no database with the name you provide. Otherwise exception will be thrown.
            </para>
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to connect to master database for this operation.</param>
            <param name="databaseName">Name of a new database you are creating </param>
            <param name="bacpacFilePath">Full path to the bacpac file</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Bacpac")
                	.Does(() =>{
                		var connString = @"data source=(LocalDb)\v12.0";
                
                		var dbName = "FromBacpac";
                
                		var file = new FilePath(@".\src\Tests\Nsaga.bacpac");
                
                		RestoreBacpac(connString, dbName, file);
                	});
                });        
            </code>
            </example>        
        </member>
        <member name="M:Cake.SqlServer.DacAliases.ExtractDacpacFile(Cake.Core.ICakeContext,System.String,System.String,Cake.SqlServer.ExtractDacpacSettings)">
            <summary>
            Extracts a dacpac file to a database package. 
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string.</param>
            <param name="targetDatabaseName">Name of the database you'd like to extract a package from</param>
            <param name="settings">Custom setting for the extract operation.</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Extract-Dacpac")
                	.Does(() =>{
                		var connString = @"data source=(LocalDb)\v12.0";
                
                		var dbName = "ForDacpac";
                
                		CreateDatabase(connString, dbName);
            
                		var settings = new ExtractDacpacSettings("MyAppName", "2.0.0.0") { 
                			OutputFile = new FilePath(@".\Nsaga.dacpac")
            			};
                
                		ExtractDacpacFile(connString, dbName, settings);
                	});
                });        
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.DacAliases.PublishDacpacFile(Cake.Core.ICakeContext,System.String,System.String,Cake.Core.IO.FilePath,Cake.SqlServer.PublishDacpacSettings)">
            <summary>
            Publish a dacpac file to a database.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to connect to master database for this operation.</param>
            <param name="targetDatabaseName">Name of a target database.</param>
            <param name="dacpacFilePath">Full path to the dacpac file.</param>
            <param name="settings">Configure the sql deployment</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Bacpac")
                	.Does(() =>{
                		var connString = @"data source=(LocalDb)\v12.0";
                
                		var dbName = "ForDacpac";
                
                		var file = new FilePath(@".\src\Tests\Nsaga.dacpac");
                
                		var settings = new PublishDacpacSettings { 
                			GenerateDeploymentScript = true
            			};
            
                		PublishDacpacFile(connString, dbName, file, settings);
                	});
                });        
            </code>
            </example>        
        </member>
        <member name="T:Cake.SqlServer.ExtractDacpacSettings">
            <summary>
            Settings for extract dacpac from database
            </summary>
        </member>
        <member name="P:Cake.SqlServer.ExtractDacpacSettings.Name">
            <summary>
            String identifier for the DAC application.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.ExtractDacpacSettings.Version">
            <summary>
            Version of the DAC application. 
            </summary>
        </member>
        <member name="P:Cake.SqlServer.ExtractDacpacSettings.Description">
            <summary>
            Optional string summary of the DAC application.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.ExtractDacpacSettings.OutputFile">
            <summary>
            Path to the package file to be created.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.ExtractDacpacSettings.Tables">
            <summary>
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which reference data should be stored.
            For each <see cref="T:System.Tuple" /> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, no reference data will be stored.
            </para>
            </summary>
        </member>
        <member name="M:Cake.SqlServer.ExtractDacpacSettings.#ctor(System.String,System.String)">
            <summary>
            String identifier for the DAC application.
            </summary>
            <param name="appName">String identifier for the DAC application.</param>
            <param name="version">Version of the DAC application.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cake.SqlServer.ExtractDacpacSettings.WithTable(System.String,System.String)">
            <summary>
             Include table in the set of tables for which reference data should be stored.
            </summary>
            <param name="table">Table name</param>
            <param name="schema">Optional schema default to 'dbo'</param>
            <returns>The same settings instance to chain config</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cake.SqlServer.PublishDacpacSettings">
            <summary>
            Settings for extract dacpac from database
            </summary>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.GenerateDeploymentScript">
            <summary>
            Sets whether Deployment Script(s) should be generated during deploy.
            If true, a script to update the database will be generated, and a script to
            update Master may also be generated if the target is an Azure SQL DB and this
            database has not yet been created.
            </summary>
            <value>Defaults to true</value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.GenerateDeploymentReport">
            <summary>
            Sets whether a Deployment Report should be generated during deploy.
            This report is a high-level summary of actions being performed during deployment.
            </summary>
            <value>Defaults to false</value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DatabaseScriptPath">
            <summary>
            Optional path to write the DB-level deployment script, if <see cref="P:Microsoft.SqlServer.Dac.PublishOptions.GenerateDeploymentScript" /> is true.
            This script contains all operations that must be done against the database during deployment.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.MasterDbScriptPath">
            <summary>
            Optional path to write the master database-level deployment script, if <see cref="P:Microsoft.SqlServer.Dac.PublishOptions.GenerateDeploymentScript" /> is true.
            This script is only created if Azure SQL DB is the target as USE statements are not supported on that platform.
            It contains all operations that must be done against the master database, for instance Create Database statements
            </summary>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.AdditionalDeploymentContributors">
            <summary>
            Specifies additional deployment contributors which should run - in addition
            to those specified in the dacpac.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.AdditionalDeploymentContributorArguments">
            <summary>
            Specifies additional deployment contributor arguments in addition to those already listed
            in the dacpac.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.AllowDropBlockingAssemblies">
            <summary>
            Get or set boolean that specifies whether CLR deployment will cause blocking assemblies to be dropped.
            </summary>
            <value>
            True to drop blocking assemblies during CLR deployment; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.AllowIncompatiblePlatform">
            <summary>
            Get or set boolean that specifies whether deployment will block due to platform compatibility.
            </summary>
            <value>
            True to block deployment to incompatible platforms; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.BackupDatabaseBeforeChanges">
            <summary>
            Get or set boolean that specifies whether a database backup will be performed before proceeding
            with the actual deployment actions.
            </summary>
            <value>
            True to perform a database backup prior to deployment; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.BlockOnPossibleDataLoss">
            <summary>
            Get or set boolean that specifies whether deployment should stop if the operation could cause data loss.
            </summary>
            <value>
            True to stop deployment if possible data loss if detected; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.BlockWhenDriftDetected">
            <summary>
            Get or set boolean that specifies whether the system will check for differences between the
            present state of the database and the registered state of the database and block deployment
            if changes are detected.  Even if this option is set to true, drift detection will only occur
            on a database if it was previously deployed with the <see cref="P:Microsoft.SqlServer.Dac.DacDeployOptions.RegisterDataTierApplication" /> option enabled.
            </summary>
            <value>
            True to error is drift is detected; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.CommandTimeout">
            <summary>
            Specifies the command timeout in seconds when executing queries against SQLServer.
            </summary>
            <value>
            The command timeout in seconds.
            Default is 60
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.CommentOutSetVarDeclarations">
            <summary>
            Get or set boolean that specifies whether the declaration of SQLCMD variables are commented
            out in the script header.
            </summary>
            <value>
            True to comment out these declarations; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.CompareUsingTargetCollation">
            <summary>
            Get or set boolean that specifies whether the target collation will be used for identifier
            comparison.
            </summary>
            <value>
            False to use the source collation; otherwise, true to use the target collation.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.CreateNewDatabase">
            <summary>
            Get or set boolean that specifies whether the existing database will be dropped
            and a new database created before proceeding with the actual deployment actions.
            Acquires single-user mode before dropping the existing database.
            </summary>
            <value>
            True to drop and re-create the database; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DeployDatabaseInSingleUserMode">
            <summary>
            Get or set boolean that specifies whether the system will acquire single-user mode on the target
            database during the duration of the deployment operation.
            </summary>
            <value>
            True to acquire single-user mode during deployment; otherwise, false.
            Default is false.
            </value>
            <remarks>
            The database will be returned to multi-user mode after all changes are applied.
            Database may remain in single-user mode if an error occurs during execution.
            </remarks>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DisableAndReenableDdlTriggers">
            <summary>
            Get or set boolean that specifies if all DDL triggers will be disabled for the duration of the
            deployment operation and then re-enabled after all changes are applied.
            </summary>
            <value>
            True to disable DDL triggers during deployment; otherwise, false.
            Default is true.
            </value>
            <remarks>
            Triggers may remain disabled if an error occurs during execution.
            </remarks>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DoNotAlterChangeDataCaptureObjects">
            <summary>
            Get or set boolean that specifies whether items configured for Change Data Capture (CDC)
            should be altered during deployment.
            </summary>
            <value>
            True to not alter objects configured for CDC; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DoNotAlterReplicatedObjects">
            <summary>
            Get or set boolean that specifies whether items configured for Replication
            should be altered during deployment.
            </summary>
            <value>
            True to not alter objects configured for Replication; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropConstraintsNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all constraints that do not
            exist in the source model.
            </summary>
            <value>
            True to drop constraints not in the source model; otherwise, false.
            Default is true.
            </value>
            <remarks>
            This applies to check, default, foreign key, primary key, and unique constraints.
            </remarks>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropDmlTriggersNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all DML triggers that do not
            exist in the source model.
            </summary>
            <value>
            True to drop DML triggers not in the source model; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropExtendedPropertiesNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all extended properties that do
            not exist in the source model.
            </summary>
            <value>
            True to drop extended properties not in the source model; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropIndexesNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all indexes that do not
            exist in the source model.
            </summary>
            <value>
            True to drop indexes not in the source model; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropObjectsNotInSource">
            <summary>
            Get or set boolean that specifies whether objects that exist in the target but not source should be dropped during deployment.
            </summary>
            <value>
            True if objects that exist in the target but not source should be dropped; otherwise false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropPermissionsNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all permissions that do not
            exist in the source model.
            </summary>
            <value>
            True to drop permissions not in the source model; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropRoleMembersNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all role memberships that do not
            exist in the source model.
            </summary>
            <value>
            True to drop role memberships not in the source model; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.DropStatisticsNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all role memberships that do not
            exist in the source model.
            </summary>
            <value>
            True to drop role memberships not in the source model; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.GenerateSmartDefaults">
            <summary>
            Get or set boolean that specifies whether default values should be generated to populate NULL columns that are constrained to NOT NULL values.
            </summary>
            <value>
            True if default values should be generated; otherwise false.
            Default is false.
            </value>
            <remarks>
            This is useful when needing to add a new NOT NULL column to an existing table with data.
            </remarks>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreAnsiNulls">
            <summary>
            Get or set boolean that specifies whether to exclude the ANSI_NULL option from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the ANSI_NULL option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreAuthorizer">
            <summary>
            Get or set boolean that specifies whether to exclude the AUTHORIZATION option from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the AUTHORIZATION option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreColumnCollation">
            <summary>
            Get or set boolean that specifies whether to exclude the collation specifier from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the collation specifier; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreComments">
            <summary>
            Get or set boolean that specifies whether to exclude comments from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in comments; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreCryptographicProviderFilePath">
            <summary>
            Get or set boolean that specifies whether to exclude the file specification
            of a cryptographic provider from consideration when comparing the source and
            target model.
            </summary>
            <value>
            True to ignore differences in a cryptographic provider's  file specification; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreDdlTriggerOrder">
            <summary>
            Get or set boolean that specifies whether to exclude DDL trigger order from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DDL trigger order; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreDdlTriggerState">
            <summary>
            Get or set boolean that specifies whether to exclude DDL trigger state from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DDL trigger state; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreDefaultSchema">
            <summary>
            Get or set boolean that specifies whether to exclude the DEFAULT_SCHEMA option from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the DEFAULT_SCHEMA options; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreDmlTriggerOrder">
            <summary>
            Get or set boolean that specifies whether to exclude DML trigger order from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DDL trigger order; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreDmlTriggerState">
            <summary>
            Get or set boolean that specifies whether to exclude DML trigger state from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DML trigger state; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreExtendedProperties">
            <summary>
            Get or set boolean that specifies whether to exclude all extended properties from
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in extended properties; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreFileAndLogFilePath">
            <summary>
            Get or set boolean that specifies whether to exclude the FILENAME option of
            FILE objects from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the FILENAME option of FILE objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreFilegroupPlacement">
            <summary>
            Get or set boolean that specifies whether to exclude the filegroup specifier
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the filegroup specifier; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreFileSize">
            <summary>
            Get or set boolean that specifies whether to exclude the SIZE option of FILE objects
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the SIZE option of FILE objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreFillFactor">
            <summary>
            Get or set boolean that specifies whether to exclude the FILLFACTOR option
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the FILLFACTOR option; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreFullTextCatalogFilePath">
            <summary>
            Get or set boolean that specifies whether to exclude the path specification of
            FULLTEXT CATALOG objects from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the path specification of FULLTEXT CATALOG objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreIdentitySeed">
            <summary>
            Get or set boolean that specifies whether to exclude the seed value of IDENTITY columns
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the seed value of IDENTITY columns; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreIncrement">
            <summary>
            Get or set boolean that specifies whether to exclude the increment value of IDENTITY columns
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the increment value of IDENTITY columns; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreIndexOptions">
            <summary>
            Get or set boolean that specifies whether to exclude differences in index options
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in index options; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreIndexPadding">
            <summary>
            Get or set boolean that specifies whether to exclude the PAD_INDEX option
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the PAD_INDEX option; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreKeywordCasing">
            <summary>
            Get or set boolean that specifies whether to exclude difference in the casing of keywords
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the casing of keywords; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreLockHintsOnIndexes">
            <summary>
            Get or set boolean that specifies whether to exclude the ALLOW_ROW_LOCKS and
            ALLOW_PAGE_LOGKS options from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the ALLOW_ROW_LOCKS and ALLOW_PAGE_LOGKS options; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreLoginSids">
            <summary>
            Get or set boolean that specifies whether to exclude the SID option of the LOGIN object
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the SID option of the LOGIN object; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreNotForReplication">
            <summary>
            Get or set boolean that specifies whether to exclude the NOT FOR REPLICATION option
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the NOT FOR REPLICATION option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreObjectPlacementOnPartitionScheme">
            <summary>
            Get or set boolean that specifies whether to exclude the partition scheme object
            from consideration when comparing the source and target model for the following
            objects: Table, Index, Unique Key, Primary Key, and Queue.
            </summary>
            <value>
            True to ignore partition schemes; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnorePartitionSchemes">
            <summary>
            Get or set boolean that specifies whether to exclude the parameter type and
            boundary VALUES of a PARTITION FUNCTION from consideration when comparing the
            source and target model.  Also excludes FILEGROUP and partition function of a
            PARTITION SCHEMA from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore aspects of partition functions and schemes; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnorePermissions">
            <summary>
            Get or set boolean that specifies whether to exclude all permission statements
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore all permission statements; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreQuotedIdentifiers">
            <summary>
            Get or set boolean that specifies whether to exclude the QUOTED_IDENTIFIER option
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the QUOTED_IDENTIFIER option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreRoleMembership">
            <summary>
            Get or set boolean that specifies whether to exclude all ROLE MEMBERSHIP objects
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore ROLE MEMBERSHIP objects; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreRouteLifetime">
            <summary>
            Get or set boolean that specifies whether to exclude the LIFETIME option of ROUTE objects
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the LIFETIME option of ROUTE objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreSemicolonBetweenStatements">
            <summary>
            Get or set boolean that specifies whether to exclude the existence or absence of semi-colons
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore semi-colons; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreTableOptions">
            <summary>
            Get or set boolean that specifies whether the options on the target table are updated
            to match the source table.
            </summary>
            <value>
            True to ignore difference in table options and not update the target table; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreUserSettingsObjects">
            <summary>
            Get or set boolean that specifies whether to exclude user settings
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in user settings; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreWhitespace">
            <summary>
            Get or set boolean that specifies whether to exclude whitespace
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences whitespace; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreWithNocheckOnCheckConstraints">
            <summary>
            Get or set boolean that specifies whether to exclude the CHECK|NO CHECK option of a CHECK
            constraint object from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the CHECK|NO CHECK option of a CHECK constraint object; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IgnoreWithNocheckOnForeignKeys">
            <summary>
            Get or set boolean that specifies whether to exclude the CHECK|NO CHECK option of a FOREIGN KEY
            constraint object from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the CHECK|NO CHECK option of a FOREIGN KEY constraint object; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.AllowUnsafeRowLevelSecurityDataMovement">
            <summary>
            Get or set boolean that specifies whether to ignore blocking data motion on RLS enabled tables
            </summary>
            <value>
            True to ignore block on data motion when Row level security is enabled on a table
            Default is false i.e. data motion is blocked with RLS by default.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IncludeCompositeObjects">
            <summary>
            Get or set boolean that specifies whether to include referenced, external elements that also
            compose the source model and then update the target database in a single deployment operation.
            </summary>
            <value>
            True to include composite objects; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.IncludeTransactionalScripts">
            <summary>
            Get or set boolean that specifies whether to use transations during the deployment operation
            and commit the transaction after all changes are successfully applied.
            </summary>
            <value>
            True to use transactions during deployment; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.NoAlterStatementsToChangeClrTypes">
            <summary>
            Get or set boolean that specifies whether to force a change to CLR assemblies by dropping and recreating them.
            </summary>
            <value>
            True if CLR assemblies should be dropped; otherwise false to allow ALTER statements to change CLR assemblies.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.PopulateFilesOnFileGroups">
            <summary>
            Get or set boolean that specifies whether files are supplied for filegroups defined in the deployment source.
            </summary>
            <value>
            True to specify files for filegroups; otherwise false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.RegisterDataTierApplication">
            <summary>
            Get or set boolean that specifies whether the database will be registered as a Data-Tier Application.
            If the target database is already a registered Data-Tier Application, then the registration will be updated.
            </summary>
            <value>
            True to register the database as a Data-Tier Application; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.RunDeploymentPlanExecutors">
            <summary>
            Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.
            Default is false.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptDatabaseCollation">
            <summary>
            Get or set boolean that specifies whether the target database should be altered to match the
            source model's collation.
            </summary>
            <value>
            True to alter the target database's collation; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptDatabaseCompatibility">
            <summary>
            Get or set boolean that specifies whether the target database should be altered to match the
            source model's compatibility level.
            </summary>
            <value>
            True to alter the target database's compatibility level; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptDatabaseOptions">
            <summary>
            Get or set boolean that specifies whether the database options in the target database should
            be updated to match the source model.
            </summary>
            <value>
            True to alter the target database's options; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptDeployStateChecks">
            <summary>
            Get or set boolean that specifies whether the target database should be checked to ensure that
            it exists, is online and can be updated.
            </summary>
            <value>
            True to perform state checks on the target database; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptFileSize">
            <summary>
            Get or set boolean that specifies whether a file size is specified when adding files to file groups.
            </summary>
            <value>
            True to specify a file size when adding files to file groups; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptNewConstraintValidation">
            <summary>
            Get or set boolean that specifies whether constraints are validated after all changes are applied.
            </summary>
            <value>
            True to validate check constraints; otherwise, false.
            Default is true.
            </value>
            <remarks>
            Constraints are always added with NOCHECK option; as a result their validation is skipped during creation.
            </remarks>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.ScriptRefreshModule">
            <summary>
            Get or set boolean that specifies whether referencing procedures are refreshed when referenced objects are updated.
            </summary>
            <value>
            True to refresh referencing procedures; otherwise false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.TreatVerificationErrorsAsWarnings">
            <summary>
            Get or set boolean that specifies whether to treat errors that occur during publish verification as warnings.
            The check is performed against the generated deployment plan before the plan is executed against the target database.
            Plan verification detects problems, such as the loss of target-only objects (for example, indexes), that must be
            dropped to make a change. Verification also detects situations where dependencies (such as tables or views) exist
            because of a reference to a composite project, but do not exist in the target database. You might choose to treat
            verification errors as warnings to get a complete list of issues instead of allowing the publish
            action to stop when the first error occurs.
            </summary>
            <value>
            True to treat errors as warnings; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.UnmodifiableObjectWarnings">
            <summary>
            Get or set boolean that specifies whether warnings should be generated when differences are found
            in objects that cannot be modified, for example, if the file size or file paths were different for a file.
            </summary>
            <value>
            True to generate warnings; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.VerifyCollationCompatibility">
            <summary>
            Get or set boolean that specifies whether deployment will verify that the collation specified in the
            source model is compatible with the collation specified in the target model.
            </summary>
            <value>
            True to continue if errors are generated during plan verification; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.VerifyDeployment">
            <summary>
            Get or set boolean that specifies whether the plan verification phase is executed or not.
            </summary>
            <value>
            True to perform plan verification; otherwise, false to skip it.
            Default is true.
            </value>
        </member>
        <member name="P:Cake.SqlServer.PublishDacpacSettings.SqlCommandVariableValues">
            <summary>
            Get dictionary of SQL command variable values, keyed by variable name.
            </summary>
            <remarks>
            Valid values must be provided for every variable before deployment, or failures may occur during deployment.
            </remarks>
        </member>
        <member name="M:Cake.SqlServer.PublishDacpacSettings.#ctor">
            <summary>
            Configures options for what will be reported when performing certain operations from <see cref="T:Microsoft.SqlServer.Dac.DacServices" />,
            in particular whether a DeployReport and/or DeployScript will be generated
            </summary>
        </member>
        <member name="T:Cake.SqlServer.RestoreSqlBackupSettings">
            <summary>
            Settings for restoring database from a backup file
            </summary>
        </member>
        <member name="M:Cake.SqlServer.RestoreSqlBackupSettings.#ctor">
            <summary>
            Default constructor for settings object. Sets SwitchToSingleUserMode to true.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.RestoreSqlBackupSettings.NewDatabaseName">
            <summary>
            Gets or sets the new name of the database.
            Name of the database where to restore. If this is not specified, database name is taken from the backup file
            </summary>
            <value>
            The new name of the database.
            </value>
        </member>
        <member name="P:Cake.SqlServer.RestoreSqlBackupSettings.NewStorageFolder">
            <summary>
            Gets or sets the new storage folder.
            Path where data and log files should be stored.If this is not specified, server defaults will be used
            </summary>
            <value>
            The new storage folder.
            </value>
        </member>
        <member name="P:Cake.SqlServer.RestoreSqlBackupSettings.WithReplace">
            <summary>
            Sets the flag to execute restore command `WITH REPLACE` suffix. Allows you to write over an existing database when 
            doing a restore without first backing up the tail of the transaction log.  
            The WITH REPLACE basically tells SQL Server to just throw out any active contents 
            in the transaction log and move forward with the restore.
            </summary>
        </member>
        <member name="P:Cake.SqlServer.RestoreSqlBackupSettings.SwitchToSingleUserMode">
            <summary>
            Before restoring backup, database will be switched to a single user mode. 
            Default operation is to go into single user mode. However in some situation this might not work.
            Use this switch to bypass single user mode and restore the DB as it is
            </summary>
        </member>
        <member name="M:Cake.SqlServer.Sql.EscapeName(System.String)">
            <summary>
            Performance-optimized SQL-safe name.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cake.SqlServer.LocalDbAliases" -->
        <member name="M:Cake.SqlServer.LocalDbAliases.LocalDbCreateInstance(Cake.Core.ICakeContext,System.String,Cake.SqlServer.LocalDbVersion)">
            <summary>
            Creates a server instance and starts the server. 
            </summary>
            <param name="context">Cake context</param>
            <param name="instanceName">Name of the instance to create</param>
            <param name="version">Version number of LocalDB to use V11 or V12.  The specified version must be installed on the computer. If not specified, the version number defaults to the version of the SqlLocalDB utility</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-LocalDB")
                     .Does(() =>
                     {
                        LocalDbCreateInstance("Cake-Test", LocalDbVersion.V11);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.LocalDbAliases.LocalDbCreateInstance(Cake.Core.ICakeContext,System.String)">
            <summary>
            Creates a server instance and starts the server. 
            The version number defaults to the version of the SqlLocalDB utility
            </summary>
            <param name="context">Cake context</param>
            <param name="instanceName">Name of the instance to create</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-LocalDB")
                     .Does(() =>
                     {
                        LocalDbCreateInstance("Cake-Test");
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.LocalDbAliases.LocalDbDeleteInstance(Cake.Core.ICakeContext,System.String)">
            <summary>
            Deletes the LocalDB instance
            </summary>
            <param name="context">Cake context</param>
            <param name="instanceName">Instance name to delete</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Delete-LocalDB")
                     .Does(() =>
                     {
                        LocalDbDeleteInstance("Cake-Test");
                    });
            </code>
            </example>        
        </member>
        <member name="M:Cake.SqlServer.LocalDbAliases.LocalDbStartInstance(Cake.Core.ICakeContext,System.String)">
            <summary>
            Starts the LocalDB instance. Instance must exist before you can start it.
            </summary>
            <param name="context">Cake context</param>
            <param name="instanceName">Name of the instance to start</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Start-LocalDB")
                     .Does(() =>
                     {
                        LocalDbStartInstance("Cake-Test");
                    });
            </code>
            </example>        
        </member>
        <member name="M:Cake.SqlServer.LocalDbAliases.LocalDbStopInstance(Cake.Core.ICakeContext,System.String)">
            <summary>
            Stops the LocalDB instance.
            </summary>
            <param name="context">Cake context</param>
            <param name="instanceName">Name of the instance to stop</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Stop-LocalDB")
                     .Does(() =>
                     {
                        LocalDbStopInstance("Cake-Test");
                    });
            </code>
            </example>  
        </member>
        <member name="T:Cake.SqlServer.LocalDbVersion">
            <summary>
            Version of LocalDB
            </summary>
        </member>
        <member name="F:Cake.SqlServer.LocalDbVersion.V11">
            <summary>
            Represents v11 of LocalDB
            </summary>
        </member>
        <member name="F:Cake.SqlServer.LocalDbVersion.V12">
            <summary>
            Represents v12 of LocalDB
            </summary>
        </member>
        <member name="F:Cake.SqlServer.LocalDbVersion.V13">
            <summary>
            Represents v13 of LocalDB
            </summary>
        </member>
        <member name="T:Cake.SqlServer.SqlServerAliases">
            <summary>
            <para>
            Contains functionality to deal with SQL Server: DropDatabase, CreateDatabase, execute SQL, execute SQL from files, etc.
            Provides functionality to manage LocalDb instances: Create, Start, Stop, Delete instances; 
            </para>
            <para>
            In order to use the commands for this addin, include the following in your build.cake file to download and
            reference from NuGet.org:
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            </code>
            </para>
            </summary>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.DatabaseExists(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Test if the database exists
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="databaseName">Database name to test</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Deploy-Database")
                     .Does(() =>
                     {
                        var connectionString = @"Server=(LocalDb)\v12.0";
                        var dbName = "CakeTest";
            
                        if (DatabaseExists(connectionString, dbName))
                        {
                            throw new Exception("A database with the same name already exists");
                        }
                        // do other stuff
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.DropDatabase(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Drops database. Before dropping the DB, database is set to be offline, then online again.
            This is to be sure that there are no live connections, otherwise the script will fail.
            Also if the database does not exist - it will not do anything.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="databaseName">Database name to be dropped</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Drop-Database")
                     .Does(() =>
                     {
                        var connectionString = @"Server=(LocalDb)\v12.0";
                        var dbName = "CakeTest";
                        DropDatabase(connectionString, dbName);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.CreateDatabase(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Creates an empty database. If database with this name already exists, throws a SqlException.
            <see cref="M:Cake.SqlServer.SqlServerAliases.CreateDatabaseIfNotExists(Cake.Core.ICakeContext,System.String,System.String)"/> if you would like to check if database already exists.
            </summary>
            <param name="context">The Cake context</param>
            <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="databaseName">Database name to be created</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Database")
                     .Does(() =>
                     {
                        var connectionString = @"Server=(LocalDb)\v12.0";
                        var dbName = "CakeTest";
                        CreateDatabase(connectionString, dbName);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.CreateDatabase(Cake.Core.ICakeContext,System.String,System.String,Cake.SqlServer.CreateDatabaseSettings)">
            <summary>
            Creates an empty database. If database with this name already exists, throws a SqlException.
            Allows to specify primary and log files location.
            </summary>
            <param name="context">The Cake context</param>
            <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="databaseName">Database name to be created</param>
            <param name="settings">Settings object with parameters</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Database")
                     .Does(() =>
                     {
                        var connectionString = @"Server=(LocalDb)\v12.0";
                        var dbName = "CakeTest";
                        var createSettings = new CreateDatabaseSettings()
                                                     .WithPrimaryFile(@"C:\MyPath\DB\CakeTest.mdf")
                                                     .WithLogFile(@"C:\MyPath\DB\CakeTest.ldf");
                        CreateDatabase(connectionString, dbName, createSettings);
                    });
            </code>
            </example>        
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.CreateDatabaseIfNotExists(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Creates an empty database if another database with the same does not already exist.
            </summary>
            <param name="context">The Cake context</param>
            <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="databaseName">Database name to be created</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Database-If-Not-Exists")
                     .Does(() =>
                     {
                        var connectionString = @"Server=(LocalDb)\v12.0";
                        var dbName = "CakeTest";
                        CreateDatabaseIfNotExists(connectionString, dbName);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.CreateDatabaseIfNotExists(Cake.Core.ICakeContext,System.String,System.String,Cake.SqlServer.CreateDatabaseSettings)">
            <summary>
            Creates an empty database if another database with the same does not already exist.
            </summary>
            <param name="context">The Cake context</param>
            <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="databaseName">Database name to be created</param>
            <param name="settings">Settings object with parameters</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Create-Database-If-Not-Exists")
                     .Does(() =>
                     {
                        var connectionString = @"Server=(LocalDb)\v12.0";
                        var dbName = "CakeTest";
                        var createSettings = new CreateDatabaseSettings()
                                                     .WithPrimaryFile(@"C:\MyPath\DB\CakeTest.mdf")
                                                     .WithLogFile(@"C:\MyPath\DB\CakeTest.ldf");
                        CreateDatabaseIfNotExists(connectionString, dbName, createSettings);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.DropAndCreateDatabase(Cake.Core.ICakeContext,System.String,System.String)">
             <summary>
             First drops, then recreates the database
             </summary>
             <param name="context">The Cake context.</param>
             <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
             <param name="databaseName">Database to be dropped and re-created</param>
             <example>
             <code>
                 #addin "nuget:?package=Cake.SqlServer"
            
                 Task("ReCreate-Database")
                      .Does(() =>
                      {
                         var connectionString = @"Server=(LocalDb)\v12.0";
                         var dbName = "CakeTest";
                         var createSettings = new CreateDatabaseSettings()
                                                      .WithPrimaryFile(@"C:\MyPath\DB\CakeTest.mdf")
                                                      .WithLogFile(@"C:\MyPath\DB\CakeTest.ldf");
                         DropAndCreateDatabase(connectionString, dbName, createSettings);
                     });
             </code>
             </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.DropAndCreateDatabase(Cake.Core.ICakeContext,System.String,System.String,Cake.SqlServer.CreateDatabaseSettings)">
             <summary>
             First drops, then recreates the database
             </summary>
             <param name="context">The Cake context.</param>
             <param name="connectionString">The connection string. For this operation, it is recommended to connect to the master database (default). If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
             <param name="databaseName">Database to be dropped and re-created</param>
             <param name="settings">Settings object with parameters</param>
             <example>
             <code>
                 #addin "nuget:?package=Cake.SqlServer"
            
                 Task("ReCreate-Database")
                      .Does(() =>
                      {
                         var connectionString = @"Server=(LocalDb)\v12.0";
                         var dbName = "CakeTest";
                         var createSettings = new CreateDatabaseSettings()
                                                      .WithPrimaryFile(@"C:\MyPath\DB\CakeTest.mdf")
                                                      .WithLogFile(@"C:\MyPath\DB\CakeTest.ldf");
                         DropAndCreateDatabase(connectionString, dbName, createSettings);
                     });
             </code>
             </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.ExecuteSqlCommand(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Execute any SQL command.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to specify Initial Catalog. If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="sqlCommands">SQL to be executed</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Sql-Operations")
                    .Does(() =>
                    {
                        var connectionString = @"Data Source=(LocalDb)\v12.0;Initial Catalog=MyDatabase";
                        var sqlCommand = "create table [CakeTest].dbo.[CakeTestTable] (id int null)";
                        ExecuteSqlCommand(connectionString, sqlCommand);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.ExecuteSqlCommand(Cake.Core.ICakeContext,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Execute any SQL command.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connection">The connection to use. The connection must be open. See <see cref="M:Cake.SqlServer.SqlServerAliases.OpenSqlConnection(Cake.Core.ICakeContext,System.String)"/>.</param>
            <param name="sqlCommands">SQL to be executed</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Sql-Operations")
                    .Does(() =>
                    {
                        using (var connection = OpenSqlConnection(@"Data Source=(LocalDb)\v12.0;Initial Catalog=MyDatabase"))
                        {
                            ExecuteSqlCommand(connection, "create table [CakeTest].dbo.[CakeTestTable] (id int null)");
                            ExecuteSqlCommand(connection, "...");
                        }
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.ExecuteSqlFile(Cake.Core.ICakeContext,System.String,Cake.Core.IO.FilePath)">
            <summary>
            Reads SQL commands from a file and executes them.
            </summary>
            <param name="context">The Cake context.</param>
            <param name="connectionString">The connection string. You may want to specify Initial Catalog. If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
            <param name="sqlFile">Path to a file with SQL commands.</param>
            <example>
            <code>
                #addin "nuget:?package=Cake.SqlServer"
            
                Task("Sql-Operations")
                    .Does(() =>
                    {
                        var connectionString = @"Data Source=(LocalDb)\v12.0;Initial Catalog=MyDatabase";
                        var sqlFile = "./somePath/MyScript.sql";
                        ExecuteSqlCommand(connectionString, sqlFile);
                    });
            </code>
            </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.ExecuteSqlFile(Cake.Core.ICakeContext,System.Data.SqlClient.SqlConnection,Cake.Core.IO.FilePath)">
             <summary>
             Reads SQL commands from a file and executes them.
             </summary>
             <param name="context">The Cake context.</param>
             <param name="connection">The connection to use. The connection must be open. See <see cref="M:Cake.SqlServer.SqlServerAliases.OpenSqlConnection(Cake.Core.ICakeContext,System.String)"/>.</param>
             <param name="sqlFile">Path to a file with SQL commands.</param>
             <example>
             <code>
                 #addin "nuget:?package=Cake.SqlServer"
            
                 Task("Sql-Operations")
                     .Does(() =>
                     {
                         using (var connection = OpenSqlConnection(@"Data Source=(LocalDb)\v12.0;Initial Catalog=MyDatabase"))
                         {
                             ExecuteSqlFile(connection, "./somePath/MyScript.sql");
                             ExecuteSqlFile(connection, "./somePath/MyOtherScript.sql");
                         }
                     });
             </code>
             </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.OpenSqlConnection(Cake.Core.ICakeContext,System.String)">
             <summary>
             Opens a new <see cref="T:System.Data.SqlClient.SqlConnection"/> with the given connection string.
             </summary>
             <param name="context">The Cake context.</param>
             <param name="connectionString">The connection string. You may want to specify Initial Catalog. If there are changing parameters, <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/> is recommended to escape input.</param>
             <example>
             <code>
                 #addin "nuget:?package=Cake.SqlServer"
            
                 Task("Sql-Operations")
                     .Does(() =>
                     {
                         using (var connection = OpenSqlConnection(@"Data Source=(LocalDb)\v12.0;Initial Catalog=MyDatabase"))
                         {
                             ExecuteSqlCommand(connection, "...");
                             ExecuteSqlFile(connection, "./somePath/MyScript.sql");
                         }
                     });
             </code>
             </example>
        </member>
        <member name="M:Cake.SqlServer.SqlServerAliases.SetSqlCommandTimeout(Cake.Core.ICakeContext,System.Int32)">
             <summary>
             Sets the CommandTimeout property for all SqlCommands used internally
             </summary>
             <param name="context">The Cake context.</param>
             <param name="commandTimeout">The time in seconds to wait for the command to execute. Used to set CommandTimeout property to when creating <see cref="T:System.Data.SqlClient.SqlCommand"/></param>
             <example>
             <code>
                 #addin "nuget:?package=Cake.SqlServer"
            
                 Task("Sql-Operations")
                     .Does(() =>
                     {
                         SetSqlCommandTimeout(60);
                         using (var connection = OpenSqlConnection(@"Data Source=(LocalDb)\v12.0;Initial Catalog=MyDatabase"))
                         {
                             ExecuteSqlCommand(connection, "...");
                             ExecuteSqlFile(connection, "./somePath/MyScript.sql");
                         }
                     });
             </code>
             </example>
        </member>
    </members>
</doc>
